package org.neuroph.samples;

import org.neuroph.nnet.Hopfield;
import org.neuroph.core.learning.DataSet;
import org.neuroph.core.learning.TrainingElement;
import java.util.Vector;

/**
* This sample shows how to create and train Hopfield neural network
*/
public class HopfieldSample {

public static void main(String args[]) {

// create training set (H and T letter in 3x3 grid)
DataSet trainingSet = new DataSet(9);
trainingSet.addElement(new DataSetRow(new double[]{1, 0, 1, 1, 1, 1, 1, 0, 1})); // H letter 
trainingSet.addElement(new DataSetRow(new double[]{1, 1, 1, 0, 1, 0, 0, 1, 0})); // T letter 

// create hopfield network
Hopfield myHopfield = new Hopfield(9);
// learn the training set
myHopfield.learn(trainingSet);

// test hopfield network
System.out.println("Testing network");

// add one more 'incomplete' H pattern for testing - it will be recognized as H
trainingSet.addElement(new DataSetRow(new double[]{1, 0, 0, 1, 0, 1, 1, 0, 1})); // incomplete H letter

for(DataSetRow dataRow : trainingSet.getRows()) {

myHopfield.setInput(dataRow.getInput());
myHopfield.calculate();
myHopfield.calculate(); 
double[ ] networkOutput = myHopfield.getOutput();

System.out.print("Input: " + Arrays.toString(dataRow.getInput()) );
System.out.println(" Output: " + Arrays.toString(networkOutput) );

}

}

}